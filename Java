/*
 * This program encrypts and decrypts messages by inputting a message
 * and stating the number of rows you'd like the encryption to contain.
 * Type the word you would like to encrypt or decrypt in the input text field.
 * Select the type of cipher you would like to apply to your message.
 * Input the key (a number for caesar or scytale cipher and a word for vigenere).
 * Select the encrypt or decrypt button and view the new message below.
 * If you choose to click the other button (such as if you first choose encrypt and now
 * want to decrypt), the program will decrypt or encrypt the input from the message
 * below not any new message you input in the text field at the top.
 * Author: Paige Wiley
 * Date: 4-8-2022
 */
package com.example.cryptography;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import android.content.DialogInterface;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.TextView;

public class MainActivity extends AppCompatActivity implements View.OnClickListener{
    boolean caesar = false;
    boolean vigenere = false;
    boolean scytale = false;
    TextView shifts;
    EditText Msg;
    TextView output;
    String message;
    int key;
    String strgkey;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);


        shifts = this.findViewById(R.id.inputShifts);
        Msg = (EditText)this.findViewById(R.id.inputMes);



        output = this.findViewById(R.id.outputMes);

        Button encrypt = (Button)this.findViewById(R.id.encryptBtn);
        Button decrypt = (Button)this.findViewById(R.id.decryptBtn);




    }




    //When a radio button is clicked
    public void onRadioButtonClicked(View view){

        /*
         * I used code from the Android developers api
         * URL: https://developer.android.com/guide/topics/ui/controls/radiobutton
         * I used this code to check which radio button was clicked.
         */
        boolean checked = ((RadioButton) view).isChecked();

        switch(view.getId()){
            case R.id.cipherCaesar:
                if(checked)
                    caesar = true;
                break;
            case R.id.cipherScy:
                if(checked)
                    scytale = true;
                break;
            case R.id.cipherVig:
                if(checked)
                    vigenere = true;
                break;
        }
    }

    //When encrypt/decrypt buttons are pushed
    public void onClick(View view) {
        Button btn = (Button)view;

        //convert textview messages into strings
        message = Msg.getText().toString();

        /*
         *I used code from stackoverflow.com
         * URL: https://stackoverflow.com/questions/15037465/converting-edittext-to-int-android
         * I used this code to convert an edit text widget into an integer for the number of shifts in the ciphers.
         */
        strgkey = shifts.getText().toString();
        if(strgkey.charAt(0) >= 48 && strgkey.charAt(0) <= 57) { //if the key is a number shift
            key = Integer.parseInt(strgkey);
        }

        //encrypt the encrypt message
        if(btn.getText().equals("Encrypt")){
            if(caesar){ //if caesar is picked
                encryptCaesar();
            } else if (vigenere) { //if vigenere is picked
                encryptVigenere();
            }else if (scytale) { //if scytale is picked
                encryptScytale();
            }
            //decrypt the decrypt message
        }else if(btn.getText().equals("Decrypt")){
            if(caesar){ //if caesar is picked
                decryptCaesar();
            } else if (vigenere) { //if vigenere is picked
                decryptVigenere();
            }else if (scytale) { //if scytale is picked
                decryptScytale();
            }
        }
    }

    public void encryptCaesar(){
        String noSpaceW;
        if(output.getText().length() > 9){
            String outputText = output.getText().toString();
            noSpaceW = outputText.replaceFirst("Message: ", "");
            noSpaceW = noSpaceW.replaceAll(" ", "");
            noSpaceW = noSpaceW.toLowerCase();
        }else {
            noSpaceW = message.replaceAll(" ", "");
            noSpaceW = noSpaceW.toLowerCase();
        }

        int[] caesarArray = new int[noSpaceW.length()];
        for(int i = 0; i < noSpaceW.length(); i++){
            if(noSpaceW.charAt(i) + key > 122){
                caesarArray[i] = noSpaceW.charAt(i) + key - 26; //returns back to a
            } else {
                caesarArray[i] = noSpaceW.charAt(i) + key;
            }
        }

        String outputString = "";
        char[] caesarChars = new char[noSpaceW.length()];
        for(int i = 0; i < noSpaceW.length(); i++){
            caesarChars[i] = (char)(caesarArray[i]);
            outputString += caesarChars[i];
        }
        String upperOutput = outputString.toUpperCase();
        output.setText("Message: " + upperOutput);

    }

    public void decryptCaesar(){
        String noSpaceW;
        if(output.getText().length() > 9){
            String outputText = output.getText().toString();
            noSpaceW = outputText.replaceFirst("Message: ", "");
            noSpaceW = noSpaceW.replaceAll(" ", "");
            noSpaceW = noSpaceW.toLowerCase();
        }else {
            noSpaceW = message.replaceAll(" ", "");
            noSpaceW = noSpaceW.toLowerCase();
        }
        System.out.println("char " + noSpaceW.charAt(1));
        int[] caesarArray = new int[noSpaceW.length()];
        for(int i = 0; i < noSpaceW.length(); i++){
            if(noSpaceW.charAt(i) - key < 97){
                caesarArray[i] = noSpaceW.charAt(i) - key + 26; //returns back to a
            } else {
                caesarArray[i] = noSpaceW.charAt(i) - key;
            }
        }
        String outputString = "";
        char[] caesarChars = new char[noSpaceW.length()];
        for(int i = 0; i < noSpaceW.length(); i++){
            caesarChars[i] = (char)(caesarArray[i]);
            outputString += caesarChars[i];
        }
        String upperOutput = outputString.toUpperCase();
        output.setText("Message: " + upperOutput);
    }

    //key word; shift by position of each letter in alphabet;
    public void encryptVigenere() {
        //convert key to string
        String keyWord = strgkey;

        String noSpaceW;
        if(output.getText().length() > 9){
            String outputText = output.getText().toString();
            noSpaceW = outputText.replaceFirst("Message: ", "");
            noSpaceW = noSpaceW.replaceAll(" ", "");
            noSpaceW = noSpaceW.toLowerCase();
        }else {
            noSpaceW = message.replaceAll(" ", "");
            noSpaceW = noSpaceW.toLowerCase();
        }

        //create array that contains the message:
        char[] vigenereWord = noSpaceW.toCharArray();

        //create an array that contains the key word
        char[] keyArray = keyWord.toCharArray();

        //create array that contains the key word
        char[] keyedMsg = new char[vigenereWord.length];

        //array that will store the finished encryption
        char[] vigenereArray = new char[noSpaceW.length()];

        /*
         *I used code from javahungry.com
         *URL: https://javahungry.blogspot.com/2019/12/vigenere-cipher-in-java.html
         *I used this code to create a multivariable loop.
         * This loop assigns the key word chars to the original message
         */
        for(int i = 0, j = 0; i < vigenereWord.length; i++, j++){
            if(j == keyArray.length){
                j = 0;
            }
            keyedMsg[i] = keyArray[j];
        }

        //This loop shifts the message based on the letter it corresponds with in the key word.
        for(int i = 0; i < keyedMsg.length; i++){
            if(noSpaceW.charAt(i) + (int)(keyedMsg[i]) - 97 > 122){
                vigenereArray[i] = (char)(noSpaceW.charAt(i) + (int)(keyedMsg[i]) - 97 - 26); //returns back to a
            } else if((int)(noSpaceW.charAt(i)) == 32){
                vigenereArray[i] = (char)(32);
            } else {
                vigenereArray[i] = (char)(noSpaceW.charAt(i) + (int)(keyedMsg[i]) - 97);
            }
        }

        //this section transfers each char from the array and puts it into a string to be printed in the app
        String outputString = "";
        for(int i = 0; i < noSpaceW.length(); i++){
            outputString += vigenereArray[i];
        }
        String upperOutput = outputString.toUpperCase();
        output.setText("Message: " + upperOutput);

    }



    public void decryptVigenere(){
        //convert key to string
        String keyWord = strgkey;

        String noSpaceW;
        if(output.getText().length() > 9){
            String outputText = output.getText().toString();
            noSpaceW = outputText.replaceFirst("Message: ", "");
            noSpaceW = noSpaceW.replaceAll(" ", "");
            noSpaceW = noSpaceW.toLowerCase();
        }else {
            noSpaceW = message.replaceAll(" ", "");
            noSpaceW = noSpaceW.toLowerCase();
        }

        //create array that contains the message:
        char[] vigenereWord = noSpaceW.toCharArray();

        //create an array that contains the key word
        char[] keyArray = keyWord.toCharArray();

        //create array that contains the key word
        char[] keyedMsg = new char[vigenereWord.length];

        //array that will store the finished encryption
        char[] vigenereArray = new char[noSpaceW.length()];


        //This loop assigns the key word chars to the original message
        for(int i = 0, j = 0; i < vigenereWord.length; i++, j++){
            if(j == keyArray.length){
                j = 0;
            }
            keyedMsg[i] = keyArray[j];
        }

        //This loop shifts the message based on the letter it corresponds with in the key word.
        for(int i = 0; i < keyedMsg.length; i++){
            if(noSpaceW.charAt(i) - ((int)(keyedMsg[i]) - 97) < 97){
                vigenereArray[i] = (char)(noSpaceW.charAt(i) - ((int)(keyedMsg[i]) - 97) + 26); //returns back to a
            } else if((int)(noSpaceW.charAt(i)) == 32){
                vigenereArray[i] = (char)(32);
            } else {
                vigenereArray[i] = (char)(noSpaceW.charAt(i) - ((int)(keyedMsg[i]) - 97));
            }
        }

        //this section transfers each char from the array and puts it into a string to be printed in the app
        String outputString = "";
        for(int i = 0; i < noSpaceW.length(); i++){
            outputString += vigenereArray[i];
        }
        String upperOutput = outputString.toUpperCase();
        output.setText("Message: " + upperOutput);
    }


    public void encryptScytale(){


        String noSpaceW;
        if(output.getText().length() > 9){
            String outputText = output.getText().toString();
            noSpaceW = outputText.replaceFirst("Message: ", "");
            noSpaceW = noSpaceW.replaceAll(" ", "");
            noSpaceW = noSpaceW.toLowerCase();
        }else {
            noSpaceW = message.replaceAll(" ", "");
            noSpaceW = noSpaceW.toLowerCase();
        }
        /*
         * I used code from vertex-academy.com
         * URL: https://vertex-academy.com/tutorials/en/rounding-numbers-java/
         * I used this code to find the width of the multidimensional array that will store the message.
         */
        double decimalW = (double)(noSpaceW.length() / (double)(key));

        int width = (int)Math.ceil(decimalW);

        int i = 0;
        char[][] scaytaleArray = new char[key][width]; //new array with a height of the key

        //establish the extra character positions:
        int extraChars = key - (noSpaceW.length() % key);


        for(int z = 0; z < key; z++){
            if(extraChars > 0){
                scaytaleArray[key - z - 1][width - 1] = '@';
            }else break;
            extraChars--;
        }

        for(int y = 0; y < key; y++){//goes through height of array
            for(int x = 0; x < width; x++){//goes through width of array
                if(i < noSpaceW.length() && scaytaleArray[y][x] != '@') {
                    scaytaleArray[y][x] = noSpaceW.charAt(i);
                    i++;
                }
            }
        }

        String outputString = "";
        for(int x = 0; x < width; x++){//through each column
            for(int y = 0; y < key; y++){//through each row
                if(scaytaleArray[y][x] != '@') {
                    outputString += scaytaleArray[y][x];
                }
            }
            String upperOutput = outputString.toUpperCase();
            output.setText("Message: " + upperOutput);
        }

    }

    public void decryptScytale() {
        String noSpaceW;
        if(output.getText().length() > 9){
            String outputText = output.getText().toString();
            noSpaceW = outputText.replaceFirst("Message: ", "");
            noSpaceW = noSpaceW.replaceAll(" ", "");
            noSpaceW = noSpaceW.toLowerCase();
            System.out.println("decrypt "+noSpaceW);
        }else {
            noSpaceW = message.replaceAll(" ", "");
            noSpaceW = noSpaceW.toLowerCase();
        }

        /*
         * I used code from vertex-academy.com
         * URL: https://vertex-academy.com/tutorials/en/rounding-numbers-java/
         * I used this code to find the width of the multidimensional array that will store the message.
         */
        double decimalW = (double)(noSpaceW.length() / (double)(key));
        System.out.println(decimalW);
        int width = (int)Math.ceil(decimalW);
        int i = 0;
        char[][] scaytaleArray = new char[key][width]; //new array with a height of the key

        for(int x = 0; x < width; x++){//goes through width of array
            for(int y = 0; y < key; y++){//goes through height of array
                if(i < noSpaceW.length()) {
                    scaytaleArray[y][x] = noSpaceW.charAt(i);
                    i++;
                } else {
                    scaytaleArray[y][x] = '@';
                }
            }
        }

        String outputString = "";
        for(int y = 0; y < key; y++){//through each row
            for(int x = 0; x < width; x++){//through each column
                if(scaytaleArray[y][x] != '@') {
                    outputString += scaytaleArray[y][x];
                }
            }
            String upperOutput = outputString.toUpperCase();
            output.setText("Message: " + upperOutput);
        }
    }
}
